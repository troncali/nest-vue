diff --git a/src/builders/browser/builder.js b/src/builders/browser/builder.js
index b6fcaf12a9e8a79bd0128a9fe4e94e6e8761a1f3..68d33c7156c193773c91ae79993df192f059c899 100644
--- a/src/builders/browser/builder.js
+++ b/src/builders/browser/builder.js
@@ -22,7 +22,7 @@ function runBuilder(options, context) {
                     webpack_1.modifyIndexHtmlPath(config, options, context);
                     webpack_1.modifyEntryPoint(config, options, context);
                     webpack_1.modifyTsConfigPaths(config, options, context);
-                    webpack_1.modifyCachePaths(config, context);
+                    // webpack_1.modifyCachePaths(config, context);
                     webpack_1.modifyTypescriptAliases(config, options, context);
                     if (babelConfig) {
                         webpack_1.modifyBabelLoader(config, babelConfig, context);
diff --git a/src/builders/browser/schema.d.ts b/src/builders/browser/schema.d.ts
index 85420eb437cdf3da4bdbd488fd303b0cb41e7c6d..a5855f32f73a8bd1d9a143d180f507dd316568cb 100644
--- a/src/builders/browser/schema.d.ts
+++ b/src/builders/browser/schema.d.ts
@@ -15,7 +15,6 @@ export interface BrowserBuilderSchema extends JsonObject {
   filenameHashing: boolean;
   productionSourceMap: boolean;
   css: {
-    requireModuleExtension: boolean;
     // eslint-disable-next-line @typescript-eslint/ban-types
     extract: boolean | object;
     sourceMap: boolean;
diff --git a/src/builders/browser/schema.json b/src/builders/browser/schema.json
index 37829929f1645bb6062f37fc55480116feb2e0bf..4aed65fbb93b344737462acdd55d7d9231c03ef4 100644
--- a/src/builders/browser/schema.json
+++ b/src/builders/browser/schema.json
@@ -72,11 +72,6 @@
     "css": {
       "type": "object",
       "properties": {
-        "requireModuleExtension": {
-          "type": "boolean",
-          "description": "By default, only files that ends in *.module.[ext] are treated as CSS modules. Setting this to false will allow you to drop .module in the filenames and treat all *.(css|scss|sass|less|styl(us)?) files as CSS modules.",
-          "default": true
-        },
         "extract": {
           "description": "Whether to extract CSS in your components into a standalone CSS files (instead of inlined in JavaScript and injected dynamically).",
           "oneOf": [
diff --git a/src/builders/dev-server/builder.js b/src/builders/dev-server/builder.js
index 5cb397a1a7757195b774c6feab848f16025397a6..ba673f84f4ba7ed4f47b3693f105ef1966c747f1 100644
--- a/src/builders/dev-server/builder.js
+++ b/src/builders/dev-server/builder.js
@@ -25,8 +25,7 @@ function runBuilder(options, context) {
     // Schema does not support setting a default value of
     // `undefined`.
     // TODO: Handle this less obtrusively.
-    if (options.css.requireModuleExtension === undefined &&
-        options.css.extract === undefined &&
+    if (options.css.extract === undefined &&
         options.css.sourceMap === undefined &&
         !Object.keys(options.css.loaderOptions).length) {
         options.css = undefined;
@@ -49,7 +48,7 @@ function runBuilder(options, context) {
                     webpack_1.modifyIndexHtmlPath(config, browserOptions, context);
                     webpack_1.modifyEntryPoint(config, browserOptions, context);
                     webpack_1.modifyTsConfigPaths(config, browserOptions, context);
-                    webpack_1.modifyCachePaths(config, context);
+                    // webpack_1.modifyCachePaths(config, context);
                     webpack_1.modifyTypescriptAliases(config, browserOptions, context);
                     if (babelConfig) {
                         webpack_1.modifyBabelLoader(config, babelConfig, context);
diff --git a/src/builders/dev-server/schema.d.ts b/src/builders/dev-server/schema.d.ts
index 7a820bae52cba11682bad9c8195d323635418a55..52383770a71f1c28da57f4e00d1dfa3e771bb773 100644
--- a/src/builders/dev-server/schema.d.ts
+++ b/src/builders/dev-server/schema.d.ts
@@ -14,7 +14,6 @@ export interface DevServerBuilderSchema extends JsonObject {
   watch: boolean;
   publicPath?: string;
   css: {
-    requireModuleExtension?: boolean;
     // eslint-disable-next-line @typescript-eslint/ban-types
     extract?: boolean | object;
     sourceMap?: boolean;
diff --git a/src/builders/dev-server/schema.json b/src/builders/dev-server/schema.json
index d777c264e54c0f20cef1c0a93a16c53a16c0b7b5..d5c0cf6989f1a39311e09548bc5c047b7fdf6f92 100644
--- a/src/builders/dev-server/schema.json
+++ b/src/builders/dev-server/schema.json
@@ -62,10 +62,6 @@
     "css": {
       "type": "object",
       "properties": {
-        "requireModuleExtension": {
-          "type": "boolean",
-          "description": "By default, only files that ends in *.module.[ext] are treated as CSS modules. Setting this to false will allow you to drop .module in the filenames and treat all *.(css|scss|sass|less|styl(us)?) files as CSS modules."
-        },
         "extract": {
           "description": "Whether to extract CSS in your components into a standalone CSS files (instead of inlined in JavaScript and injected dynamically).",
           "oneOf": [
diff --git a/src/builders/library/builder.js b/src/builders/library/builder.js
index 5f6bc99aca3b0ff64954b97176f259ff0776382d..7923bcc6fbad855713e194c8bf6295154557a5f5 100644
--- a/src/builders/library/builder.js
+++ b/src/builders/library/builder.js
@@ -20,7 +20,7 @@ function runBuilder(options, context) {
             const inlineOptions = {
                 chainWebpack: (config) => {
                     webpack_1.modifyTsConfigPaths(config, options, context);
-                    webpack_1.modifyCachePaths(config, context);
+                    // webpack_1.modifyCachePaths(config, context);
                     webpack_1.modifyTypescriptAliases(config, options, context);
                     webpack_1.modifyCopyAssets(config, options, context, projectRoot);
                     if (babelConfig) {
diff --git a/src/builders/library/schema.d.ts b/src/builders/library/schema.d.ts
index 3320c0ebc82ddc7ff738f35510a37442c7edc25a..6e41fa51d914c663c168976b67d4bcd9596e21e4 100644
--- a/src/builders/library/schema.d.ts
+++ b/src/builders/library/schema.d.ts
@@ -11,7 +11,6 @@ export interface LibraryBuilderSchema extends JsonObject {
   tsConfig: string;
   inlineVue: boolean;
   css: {
-    requireModuleExtension: boolean;
     // eslint-disable-next-line @typescript-eslint/ban-types
     extract: boolean | object;
     sourceMap: boolean;
diff --git a/src/builders/library/schema.json b/src/builders/library/schema.json
index 649b82cc395e74afc82a301468f4712a81325c8a..6095053cfffdeba0e0cfac35225f7aeff1b8caa8 100644
--- a/src/builders/library/schema.json
+++ b/src/builders/library/schema.json
@@ -61,11 +61,6 @@
     "css": {
       "type": "object",
       "properties": {
-        "requireModuleExtension": {
-          "type": "boolean",
-          "description": "By default, only files that ends in *.module.[ext] are treated as CSS modules. Setting this to false will allow you to drop .module in the filenames and treat all *.(css|scss|sass|less|styl(us)?) files as CSS modules.",
-          "default": true
-        },
         "extract": {
           "description": "Whether to extract CSS in your components into a standalone CSS files (instead of inlined in JavaScript and injected dynamically).",
           "oneOf": [
